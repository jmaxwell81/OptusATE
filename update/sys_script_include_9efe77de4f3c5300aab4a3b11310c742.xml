<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_cio19_optus_ate.ATE_Helper_Functions</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>ATE_Helper_Functions</name>
        <script><![CDATA[var ATE_Helper_Functions = Class.create();
ATE_Helper_Functions.prototype = {
    initialize: function() {
    },
		 //Changes the outgoing SOAP endpoint depending on the SN instance, defined in ATE Properties    
	instanceEndpoint : function(){
	var instance=gs.getProperty('instance_name');
	if (instance.indexOf('dev')>-1){
		outgoing_api = gs.getProperty('x_cio19_optus_ate.outgoing_API_DEV');
	}else{
	if (instance.indexOf("uat")>-1){
		outgoing_api=gs.getProperty('x_cio19_optus_ate.outgoing_API_UAT');
	}else{
	outgoing_api=gs.getProperty('x_cio19_optus_ate.outgoing_API_PROD');
	}}
	if (gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
		gs.info("OPTUS ATE Environment: " + instance+', '+outgoing_api);
		}
		return instance;
},
	
	
	toTitleCase : function () {
   return this.replace(/\w\S*/g, function(txt){return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();});
},

    titlecase : function(str){
    var arr=[];  
    var str1=str.split(' ');
    for (var i = 0; i < str1.length; i++) {
    var upper= str1[i].charAt(0).toUpperCase()+ str1[i].substr(1);
    arr.push(upper);
     }
      return arr.join(' ');
    },
	
	
/*	
parseAttachments : function () {
    try {
                var xmldoc;
                gs.info("OPTUS ATE parseAttachments()");
        if(source.attachment_binary_information.toString()=="<see_attachment/>"){
                        //Load the attachment data element from the sys_attachment table
                        gs.info("OPTUS ATE Load the attachment data element from the sys_attachment table");
                        var grAtt = new GlideRecord('sys_attachment');
                        gs.info("OPTUS ATE Querying attachment: "+source.sys_id.toString());
                        if(grAtt.get("table_sys_id",source.uniqueid.toString())){
                                gs.info("OPTUS ATE Found attachment:"+grAtt.sys_id.toString());
                                
                                var gsa = new GlideSysAttachment();
                var bytesInFile = gsa.getBytes(source.sys_class_name.toString(), source.uniqueid.toString());
                                gs.info("OPTUS ATE bytesInFile="+bytesInFile.length);
                                
                //var dataAsString = new Packages.java.lang.String(bytesInFile);
                                
                                //var gsa = GlideSysAttachmentInputStream(grAtt.sys_id.toString());
 
                                //var baos = new Packages.java.io.ByteArrayOutputStream();
                                //gsa.writeTo(baos);
                                //baos.close();
                                //var strData=baos.toString();
                                gs.info("OPTUS ATE Attachment bytesInFile length="+bytesInFile.toString().length);
                                xmldoc = new XMLDocument2(bytesInFile.toString());
                        }
                        
                        
                }else{
                        xmldoc = new XMLDocument2(source.attachment_binary_information);
                }
                
        var node = xmldoc.getNodes("//Attachments/*");
                
                gs.info('OPTUS ATE onAfter parseAttachments: ' + node.getLength() + ' - ' + source.attachment_binary_information	.toString());
                
        for(i=0; i < node.getLength(); i++){
 
            var attachmentNumber = i + 1;
 
            var filename = xmldoc.getNodeText("//Attachments/Attachment[" + attachmentNumber + "]/Filename");
            var filetype = xmldoc.getNodeText("//Attachments/Attachment[" + attachmentNumber + "]/Filetype");
            var filedata = xmldoc.getNodeText("//Attachments/Attachment[" + attachmentNumber + "]/Contents");
 
            createAttachment(filename, filetype, filedata);
        }
 
    } catch (e) {
        gs.error("OPTUS ATE An error occurred parsing attachment(s) into a record on the XML Incident transform map. It is " + e.message);
    }
},
 */
// This function is doing (i) create the attachment (ii) Retrieve the attachment and do the flowthrough
createAttachment : function (fileName, fileType, fileData) {
try{ 
   // var StringUtil = GlideStringUtil;
    var fileDataDecoded = gs.base64Decode(fileData);
    var tableName = target.getTableName();
    var sys_id = target.getUniqueValue();
        
        gs.info('OPTUS ATE onAfter createAttachment: ' + tableName + ' - ' + sys_id + ' - ' + fileName + ' - ' + fileType);
        
        // (i) Create the attachment
    var attachment = new GlideSysAttachment();
    attachment.write(tableName, sys_id, fileName, fileType, fileDataDecoded);
       
        // (ii) Flowthrough
        if (target.assignment_group.u_ate_flow_through_method == "XML") {
                
        // This section is doing the flow through attachment from PMSD to UNISYS
        if(target.company.u_transport_method=='SQL'){
            var record = ATEIntegrationHelper.parentAttachmentRecordExists(tableName, sys_id);
 
            var miscFunc = new ATEMiscFunctions();
            var ateUsrAcct = gs.getProperty("ate_user_account");
            var attachmentRtn = miscFunc.getAttachment(tableName, sys_id, fileName, fileType, ateUsrAcct, true);
 
            var ateIntHelper = new ATEIntegrationHelper(record);
            ateIntHelper.insertSQLAttachmentBinary(attachmentRtn);
         }
		}	
}catch(createatt){
	gs.error('OPTUS ATE Helper Create Attachment: '+createatt.message);
}
},
	addJournal : function(sysid,element){
		var jnlwl=new GlideRecord('sys_journal_field');
		jnlwl.addQuery('element_id',sysid);
		jnlwl.addQuery('element',element);
		jnlwl.query();
		if(jnlwl.next()){
			gs.info('OPTUS ATE Journal Entry Work log: '+jnlwl.value);
			var journalString='';
			journalString=jnlwl.value;
			while(jnlwl.next()){
			
				journalString+='\n'+jnlwl.value;
				//inc.worklog=journalString;
				return journalstring;
			
			}
		}
	},
	
	
	tccAttachment : function(sysid){
	var inc_att = new GlideRecord('sys_attachment');
	var inc_att_doc = new GlideRecord('sys_attachment_doc');
	try{
	inc_att.addQuery('table_sys_id',sysid);
	inc_att.addQuery('table_name', source.getTableName());
	inc_att.query();
	
	if(inc_att.next()){
	var attachname = '';
	attachname = inc_att.file_name;
	var filetype = '';
	filetype=inc_att.content_type;
	var filesize ='';
	filesize=inc_att.size_bytes;
	var contentid='';
	contentid=inc_att.getUniqueValue();
	
	//combine base64 encoded file and insert into holding table	
	// see https://www.servicenowguru.com/integration/sending-attachments-3rdparty-service-desk/
	var inc_docs = inc_att_doc.addJoinQuery('sys_attachment','sys_attachment');
	inc_docs.addCondition('sys_attachment', inc_att.sysid);
	inc_att_doc.addQuery('sys_attachment', inc_att.sysid);
	inc_att_doc.orderBy('position');
	inc_att_doc.query();
		while(inc_att_doc.next()){
			var attachments ='';
			attachments += inc_att_doc.toString();
			var attachment_binary_information ='';
			attachment_binary_information+=inc_att_doc.data;
			
		 var xml = "<ate:attachment action=\"add\" charset=\"UTF-8\" ";
                xml += "len=\"" + filesize + "\" name=\"" + attachname + "\" ";
                xml += "type=\"" + filetype + "\" contentId=\"" + contentid + "\">";
                xml += attachment_binary_information;
                xml += "</ate:attachment>";
			return xml;
	}
	}
	else{
		gs.info('OPTUS ATE 21: No Attachment');
	}
}
	catch(att_err){
		gs.error("OPTUS ATE 21: insert attachment failed ",att_err);
		
}
	},
	 createAttach: function(record,name,contentType, data) {
    
	var attCreator = new GlideRecord('ecc_queue');
     attCreator.agent = "AttachmentCreator";
     attCreator.topic = "AttachmentCreator";
     attCreator.name =   name + ":" + contentType;
     attCreator.source = record.getTableName()+":"+record.sys_id;
     attCreator.payload = data;
     attCreator.insert();
 },
	
	
	/** Function that count occurrences of a substring in a string;
 * @param {String} string               The string
 * @param {String} subString            The sub string to search for
 * @param {Boolean} [allowOverlapping]  Optional. (Default:false)
 *
 * @author Vitim.us https://gist.github.com/victornpb/7736865
 * @see Unit Test https://jsfiddle.net/Victornpb/5axuh96u/
 * @see http://stackoverflow.com/questions/4009756/how-to-count-string-occurrence-in-string/7924240#7924240
 */
occurrences : function (string, subString, allowOverlapping) {

    string += "";
    subString += "";
    if (subString.length <= 0) return (string.length + 1);

    var n = 0,
        pos = 0,
        step = allowOverlapping ? 1 : subString.length;

    while (true) {
        pos = string.indexOf(subString, pos);
        if (pos >= 0) {
            ++n;
            pos += step;
        } else break;
    }
    return n;
	
	/*Usage
	occurrences(string, string);
	occurrences('String to search', 'String to search for');
	returns int, number of occurrences 'String to search for' is found in 'String to search'
	
	*/
},
	
		 getAttachmentNodeData : function(_get_inc, _xmldoc){
		

		var filedata = _xmldoc.getNode('/Contents').getTextContent();		 
		var filetype = _xmldoc.getNode('/Filetype').getTextContent();
		var filename = _xmldoc.getNode('/Filename').getTextContent();
		
		//var filedata = _xmldoc.getNodeText('/Contents');

		
	},

 
    type: 'ATE_Helper_Functions'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>lzs@townsville.qld.gov.au</sys_created_by>
        <sys_created_on>2018-03-14 23:34:28</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>9efe77de4f3c5300aab4a3b11310c742</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>ATE_Helper_Functions</sys_name>
        <sys_package display_value="Optus ATE" source="x_cio19_optus_ate">9cf254e14fd8c3005596c61f0310c793</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Optus ATE">9cf254e14fd8c3005596c61f0310c793</sys_scope>
        <sys_update_name>sys_script_include_9efe77de4f3c5300aab4a3b11310c742</sys_update_name>
        <sys_updated_by>lzs@townsville.qld.gov.au</sys_updated_by>
        <sys_updated_on>2018-04-12 00:11:12</sys_updated_on>
    </sys_script_include>
</record_update>
