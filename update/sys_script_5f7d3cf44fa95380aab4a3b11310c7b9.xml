<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_cio19_optus_ate_tcceventin</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_cio19_optus_ate_tcceventin">messagetype=24^customerticketidSTARTSWITHCHG^EQ<item endquery="false" field="messagetype" goto="false" newquery="false" operator="=" or="false" value="24"/>
            <item endquery="false" field="customerticketid" goto="false" newquery="false" operator="STARTSWITH" or="false" value="CHG"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>ATE_OPT_CHG_Update_24</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
var inc = new GlideRecord('x_cio19_optus_ate_optus_ate_holding');
	try{
	// Add your code here
	//var inc_att = new GlideRecord('sys_attachment');
	//var inc_att_doc = new GlideRecord('sys_attachment_doc');
	
//	var wri_att=new GlideSysAttachment();
//	wri_att.writeBase64(current.sys_id,current.attachment_file_name,'UTF-8',current.attachment_binary_information);
	


//inc.initialize();
inc.addQuery('number',current.customerticketid);
inc.query(); 
	
if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
	gs.info('OPTUS ATE BR-24 CHG Update: '+current.csnsticketid);
}
while (inc.next()) {
	inc.csnsticketstatus = current.csnsticketstatus;
		//incident.addQuery('sys_id',inc_id);
	if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
	gs.info('OPTUS ATE BR-24 CHG Update: '+inc.csnsticketstatus);
}
	inc.update();
}
	var inc_id=inc.uniqueid;
	

	
	
	var chg_req = new GlideRecord('change_request');
	chg_req.addQuery('number',current.customerticketid);
	chg_req.query();

	if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
		gs.info('OPTUS ATE BR-24 CHG Ticket Update Task: '+chg_req.comments+', '+current.worklog+', '+current.updatedescrption+', '+inc_id);
	
	while(chg_req.next()){
		//Update work notes and comments
		//https://docs.servicenow.com/bundle/jakarta-platform-administration/page/administer/field-administration/concept/c_JournalFields.html
		
		chg_req.work_notes="OPTUS work notes: "+current.worklog+'\n\n'+"OPTUS Comments: "+current.updatedescrption;
		//chg_req.description=incident.description+' :OPTUS Update: '+current.updatedescrption;
		//chg_req.comments="OPTUS Comments: "+current.updatedescrption;
		if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
				gs.info('OPTUS ATE CHG Inserted comment journal: '+current.updatedescrption+', '+current.worklog);
			}
	
		//if customerticketid like CHG* statmap.addQuery('u_ticket_category','change_request');	
		var statmap=new GlideRecord('x_cio19_optus_ate_optus_ate_mapping');
		statmap.addQuery('u_company','Optus');
		statmap.addQuery('u_ticket_category','change_request');
		statmap.addQuery('u_source_field','Status');
		statmap.addQuery('u_source_value',current.csnsticketstatus);
		statmap.query();

		while(statmap.next()){
			chg_req.state=statmap.u_target_value;
		}
/*		//Insert attachment
		if(current.attachment_file_name!=''){	
		var clean=new GlideRecord('x_cio19_optus_ate_tcceventin');
		clean.addQuery('number',current.number);
		clean.query();
		while(clean.next()){
			current.attachment_binary_information=current.attachment_binary_information.replace('<Contents>','');
			current.attachment_binary_information=current.attachment_binary_information.replace('</Contents>','');
			current.attachment_file_name=current.attachment_file_name.replace('<Filename>','');
			current.attachment_file_name=current.attachment_file_name.replace('</Filename>','');
		}
		
		
		var getTask=new GlideRecord('incident');
		getTask.get(inc.sys_id);
		//var binData='';
		//binData=gs.base64Decode(current.attachment_binary_information);
		var getExt = current.attachment_file_name.split('.').pop();
//	var wri_att=new GlideSysAttachment();
//	var binData = wri_att.writeBase64(getTask,current.attachment_file_name,'image\jpeg',current.attachment_binary_information);
	//wri_att.write(inc_in.sys_id,'Photo.jpg','image\jpeg',binData);
		help_att=new ATE_Helper_Functions();
		help_att.createAttach(getTask,current.attachment_file_name,getExt,current.attachment_binary_information);
	if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
		gs.info('OPTUS ATE BR-24 Attachment added: '+current.attachment_file_name+', sys_ID: '+inc.sys_id);
	}
		}
	*/	
		
		//check for closure code and map from Optus
		if(current.closure_code != ''){
		var closemap = new GlideRecord('x_cio19_optus_ate_optus_ate_mapping');
				closemap.addQuery('u_company','Optus');
		closemap.addQuery('u_ticket_category','change_request');
		closemap.addQuery('u_source_field','closure_code');
		closemap.addQuery('u_source_value',current.closure_code);
		closemap.query();

		while(closemap.next()){
			chg_req.close_code=closemap.u_target_value;
			//incident.close_notes='Closed by Optus PMSD, see comments for closure notes';
			chg_req.close_notes= current.comments.getJournalEntry(-1);
		}
		}
		//incident.closure_code=current.closure_code; //mapping
		//incident.closure_notes=current.closure_notes;
		
		chg_req.update();
		if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
		gs.info('OPTUS ATE BR-24 Ticket Update Task: '+chg_req.number+', '+chg_req.description+', '+chg_req.work_notes+', '+chg_req.comments+', '+current.worklog+', '+current.updatedescrption);
	}
	}
	
	//inc.update();
if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
		gs.info('OPTUS ATE BR-24 CHG Ticket Update Holding: '+inc.number+' '+inc.uniqueid);
	}
}
}catch(hold){
	gs.error('OPTUS ATE BR-24 CHG ERROR HOLDING: '+hold+' ' +inc.number+' '+inc.uniqueid);
}
	
	
	if(current.attachment_binary_information!='')
{parseAttachments();}



function parseAttachments() {
    try {
//	https://community.servicenow.com/community?id=community_question&sys_id=3d098fa1db5cdbc01dcaf3231f961906
		var arrname=current.attachment_binary_information.split('</Attachment>');
        var xmldoc = new XMLDocument2();
		xmldoc.parseXML(current.attachment_binary_information);
		//var rootNode = xmldoc.getDocumentElement();
		//xmldoc.setCurrentElement(rootNode);
        var node = xmldoc.getNode('//Attachments/Attachment');
		var nodeValue = '';
		//var iter = node.getChildNodeIterator();
		gs.info('OPTUS ATE: '+node.getAttribute('Content')+' : NodeText'+node.getTextContent()+' NodeName: '+node.getNodeName());
		//while(iter.hasNext()){
		//	var n = iter.next();
        //for (i = 0; i < arrname.length; i++){  
			var filedata = xmldoc.getNode('//Attachments/Attachment/Contents').getTextContent();		 
            var filetype = xmldoc.getNode('//Attachments/Attachment/Filetype').getTextContent();
			var filename = xmldoc.getNode('//Attachments/Attachment/Filename').getTextContent();

			
            if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
				
				gs.info('OPTUS ATE onAfter Transform Script: filename= '+filename+', filetype= '+filetype+', filedata= '+filedata+', NodeName= '+node.getNodeName()+', NodeValue= '+node.getTextContent());
			}
			//var data=gs.base64Decode(filedata);
			//Get the incident to attach to
			var get_inc=new GlideRecord('change_request');
			get_inc.addQuery('u_third_party_reference',current.csnsticketid);
			//get_inc.get(get_inc.getUniqueValue());
			get_inc.query();
			while(get_inc.next()){
				var help=new ATE_Helper_Functions();
				help.createAttach(get_inc,filename,filetype,filedata);
			}
            //createAttachment(filename, filetype, filedata);
		
        
    } catch (e) {
        gs.error("OPTUS ATE: An error occurred parsing attachment(s) into a record on the XML Incident transform map. It is " + e.message);
    }
}
/*try{	
var incident = new GlideRecord('incident');	
incident.addQuery('sys_id',current.cnsticketid);
	while(incident.next()){
		
		
	incident.update();
if(gs.getProperty('x_cio19_optus_ate.Debug')=='true'){
		gs.info('OPTUS ATE BR-24 Ticket Update Incident:'+incident.number+' '+incident.uniqueid);
	}
	
	 }
}catch(inc_up){
	gs.error('OPTUS ATE BR-24 Ticket Update Incident: '+inc_up);
	gs.eventQueue('x_cio19_optus_ate.alerterror',current,gs.getProperty('x_cio19_optus_ate.Alert_Notifications'),'OPTUS ATE BR-24 RESPONSE: ' +inc_up);
}	
	*/
}	

)(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>lzs@townsville.qld.gov.au</sys_created_by>
        <sys_created_on>2018-04-16 00:25:32</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>5f7d3cf44fa95380aab4a3b11310c7b9</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>ATE_OPT_CHG_Update_24</sys_name>
        <sys_overrides/>
        <sys_package display_value="Optus ATE" source="x_cio19_optus_ate">9cf254e14fd8c3005596c61f0310c793</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Optus ATE">9cf254e14fd8c3005596c61f0310c793</sys_scope>
        <sys_update_name>sys_script_5f7d3cf44fa95380aab4a3b11310c7b9</sys_update_name>
        <sys_updated_by>lzs@townsville.qld.gov.au</sys_updated_by>
        <sys_updated_on>2018-05-17 05:52:40</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=5f7d3cf44fa95380aab4a3b11310c7b9"/>
</record_update>
